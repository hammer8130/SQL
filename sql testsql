-- SQL 문장의 주석
-- 마지막에 세미콜론으로 끝낸다
-- 키워드, Table, 컬럼 등 대소문자 구분 X
-- 실제 데이터의 경우 대소문자를 구분

-- 테이블 구조 확인 (DESCRIBE)
DESCRIBE employees;
describe EMPLOYEES;

DESCRIBE departments;
DESCRIBE Locations;

-- DML(Data Manipulation Language)
-- SELECT
SELECT *
FROM EMPLOYEES;

-- 특정 컬럼만 Projection하고자 하면 열 목록을 명시

-- employees 테이블의 first_name, phone_number,hire_date,salary

SELECT first_name, phone_number, hire_date,salary
FROM EMPLOYEES; -- 대소문자 구분 X

-- 사원의 이름, 성, 급여, 전화번호, 입사일 정보 
SELECT FIRST_NAME, LAST_NAME, SALARY, PHONE_NUMBER, HIRE_DATE
FROM EMPLOYEES;

-- 사원에서 사번, 이름, 성 정보 출력
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME
FROM EMPLOYEES;

-- 산술연산 : 기본적인 산술연산을 수행할 수 있다.
-- 특정 테이블의 값이 아닌 시스템으로부터 데이터를 받아오고자 할 때 : dual (가상테이블)
SELECT 3.14159 * 10 * 10
FROM DUAL;

-- 특정 컬럼의 값을 산술 연산에 포함
SELECT FIRST_NAME, SALARY, SALARY*12
FROM EMPLOYEES;

-- NULL
-- 이름, 급여를 출력
SELECT FIRST_NAME, SALARY, COMMISSION_PCT
FROM EMPLOYEES;

-- 이름,커미션까지 포함한 급여
SELECT FIRST_NAME,SALARY,COMMISSION_PCT, 
       SALARY+SALARY* COMMISSION_PCT
FROM EMPLOYEES; --NULL이 포함된 연산식은 NULL
                --NULL처리 함수 NVL 필요

-- NVL활용 대체값 0 계산
SELECT FIRST_NAME,SALARY,COMMISSION_PCT,
       SALARY+SALARY*NVL(COMMISSION_PCT,0)
FROM EMPLOYEES;

-- Alias / 별칭
-- Projection 단계에서 출력용으로 표시되는 임시 컬럼 제목

-- 직원아이디, 이름, 급여 출력
-- 직원아이디는 empno, 이름은 f-name, 급여는 월급으로 출력
SELECT EMPLOYEE_ID AS empno, FIRST_NAME AS "f-name", SALARY AS "월급"
FROM EMPLOYEES;

-- 직원 이름(first_name과 last_name 합쳐서) name으로 출력
-- 급여(커미션이 포함된 급여),급여*12를 연봉 으로 출력
SELECT FIRST_NAME ||' '|| LAST_NAME AS NAME, SALARY+SALARY*NVL(COMMISSION_PCT,0) AS "급여",
       SALARY*12 AS "연봉"
FROM EMPLOYEES;


SELECT FIRST_NAME || ' '|| LAST_NAME 이름, HIRE_DATE 입사일, PHONE_NUMBER 전화번호,
       SALARY 급여, SALARY*12 연봉
FROM EMPLOYEES;

------------
--WHERE
------------

-- WHERE절 연습문제
SELECT FIRST_NAME || ' '|| LAST_NAME 이름, SALARY 급여
FROM EMPLOYEES
WHERE SALARY >=15000;

-- 입사일이 07/01/01 이후의 직원들의 이름과 입사일
SELECT FIRST_NAME, HIRE_DATE
FROM EMPLOYEES
WHERE HIRE_DATE > '17/01/01';

-- 급여가 4000 이하이거나 17000 이상인 사원의 이름과 급여
SELECT FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY <=4000 OR SALARY>=17000
ORDER BY SALARY ASC;

-- 급여가 14000이상이고, 17000미만인 사원의 이름과 급여
SELECT FIRST_NAME|| ' ' ||LAST_NAME NAME, SALARY
FROM EMPLOYEES
WHERE SALARY BETWEEN 14000 AND 17000;

-- NULL 체크할때 = , <> 사용하면 안됨
-- IS NULL, IS NOT NULL

-- 커미션을 받지 않는 사람들이 null인 레코드
SELECT FIRST_NAME, COMMISSION_PCT
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NULL;

-- 커미션을 받느느사람들이 널이 아닌 레코드
SELECT FIRST_NAME, COMMISSION_PCT
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL;

-- IN 연산자: 특정 집합의 요소와 비교
-- 사원들 중 10,20,40번 부서에서 근무하는 직원들의 이름과 부서 아이디
SELECT FIRST_NAME, DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (10,20,40);

------------
-- Like 연산
------------

-- 이름에 am을 포함하고 있는 사원의 이름과 급여
SELECT FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE LOWER(FIRST_NAME) LIKE '%am%';

-- 이름의 두 번째 글자가 a인 사원의 이름과 급여
SELECT FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE LOWER(FIRST_NAME) LIKE '_a%';

-- 이름의 네번재 글자가 a인 사원의 이름과 급여
SELECT FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE LOWER(FIRST_NAME) LIKE '___a%';

-- 이름이 네글자인 사원들 중 두번째 글자가 a인 사원의 이름과 급여
SELECT FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE LOWER(FIRST_NAME) LIKE '_a__'; 

-- 부서 ID가 90인 사원 중, 급여가 20000 이상인 사원
SELECT FIRST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID=90 AND SALARY>=20000;

-- 입사일이 07/01/01 ~ 07/12/31 구간에 있는 사원 목록
SELECT FIRST_NAME, HIRE_DATE
FROM EMPLOYEES
WHERE HIRE_DATE BETWEEN '11/01/01' AND '17/12/31';

-- manager_id가 100,120,147인 사원의 명단
SELECT FIRST_NAME, MANAGER_ID
FROM EMPLOYEES
WHERE MANAGER_ID IN(100,120,147);

-----------
-- ORDER BY
-----------

-- 부서번호, 급여, 이름순으로 출력. 정렬기준 부서번호 오름차순, 급여 내림차순
SELECT DEPARTMENT_ID,SALARY,FIRST_NAME
FROM EMPLOYEES
ORDER BY DEPARTMENT_ID ASC, SALARY DESC; -- 정렬기준을 어떻게 세우느냐에 따라 출력 결과 영향 미침

-- 급여가 10000 이상인 직원 대상, 급여의 내림차순으로 이름과 급여 출력
SELECT FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY >=10000
ORDER BY SALARY DESC;




