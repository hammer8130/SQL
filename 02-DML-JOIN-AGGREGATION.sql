--------
--JOIN
--------

-- employees 와 departments
DESC EMPLOYEES;
DESC DEPARTMENTS;

SELECT * FROM EMPLOYEES;
SELECT * FROM DEPARTMENTS;

-- 카티전 프로덕트

SELECT *
FROM EMPLOYEES e, DEPARTMENTS d
WHERE e.DEPARTMENT_ID = d.DEPARTMENT_ID; -- 106

-- simple Join / Equi-Join

SELECT e.FIRST_NAME, e.DEPARTMENT_ID, d.DEPARTMENT_ID, d.DEPARTMENT_NAME
FROM EMPLOYEES e , DEPARTMENTS d
WHERE e.DEPARTMENT_ID = d.DEPARTMENT_ID; -- 부서 아이디가 NULL인 직원 배제

SELECT * FROM EMPLOYEES
WHERE DEPARTMENT_ID IS NULL;

SELECT e.FIRST_NAME, d.DEPARTMENT_NAME
FROM EMPLOYEES e JOIN DEPARTMENTS d
USING(DEPARTMENT_ID);

--------
-- Theta Join
--------

-- 급여가 직군 평균 급여보다 낮은 직원들 목록
SELECT e.EMPLOYEE_ID, e.FIRST_NAME, e.SALARY, e.JOB_ID,
    j.JOB_ID, j.JOB_TITLE
FROM EMPLOYEES e JOIN JOBS j
ON e.JOB_ID = j.JOB_ID
WHERE e.SALARY <= (j.MIN_SALARY + j.MAX_SALARY)/2;

-------Outer Join

-- 조건을 만족하는 짝이 없는 튜플도 null을 포함해서 결과 출력 참여시키는 방법
-- 모든 결과를 표현한 테이블이 어느쪽에 위치하는가

-----------
-- LEFT OUTER JOIN
-----------

-- Oracle SQL
SELECT e.FIRST_NAME, e.DEPARTMENT_ID, d.DEPARTMENT_ID, d.DEPARTMENT_NAME
FROM EMPLOYEES e JOIN DEPARTMENTS d
ON e.DEPARTMENT_ID = d.DEPARTMENT_ID (+); -- null이 포함된 테이블쪽에 (+) 표기

SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID IS NULL;  -- Kimberly 부서 소속x

-- ANSI SQL
SELECT e.FIRST_NAME, e.DEPARTMENT_ID, d.DEPARTMENT_ID, d.DEPARTMENT_NAME
FROM EMPLOYEES e LEFT OUTER JOIN DEPARTMENTS d
ON e.DEPARTMENT_ID = d.DEPARTMENT_ID;

-- RIGHT OUTER JOIN

-- 오른쪽 테이블의 모든 레코드가 출력 결과에 참여

-- Oracle SQL
SELECT e.FIRST_NAME, e.DEPARTMENT_ID, d.DEPARTMENT_ID, d.DEPARTMENT_NAME
FROM EMPLOYEES e JOIN DEPARTMENTS d
ON e.DEPARTMENT_ID (+) = d.DEPARTMENT_ID;

-- ANSI SQL
SELECT e.FIRST_NAME, e.DEPARTMENT_ID, d.DEPARTMENT_ID, d.DEPARTMENT_NAME
FROM EMPLOYEES e RIGHT OUTER JOIN DEPARTMENTS d
ON e.DEPARTMENT_ID = d.DEPARTMENT_ID;

----------
-- FULL OUTER JOIN
----------

-- ANSI SQL
SELECT e.FIRST_NAME, e.DEPARTMENT_ID, d.DEPARTMENT_ID, d.DEPARTMENT_NAME
FROM EMPLOYEES e FULL OUTER JOIN DEPARTMENTS d
ON e.DEPARTMENT_ID = d.DEPARTMENT_ID;

-----------
-- NATURAL JOIN
-----------

-- JOIN할 테이블에 같은 이름의 컬럼이 있을 경우, 해당 컬럼을 기준으로 JOIN

SELECT * FROM EMPLOYEES e
NATURAL JOIN DEPARTMENTS d; -- 32

SELECT * FROM EMPLOYEES e
JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID; -- 106

SELECT *
FROM EMPLOYEES e JOIN DEPARTMENTS d
ON e.DEPARTMENT_ID = d.DEPARTMENT_ID AND e.MANAGER_ID = d.MANAGER_ID;

-----------
-- SELF JOIN
-----------

SELECT e.EMPLOYEE_ID, e.FIRST_NAME, e.MANAGER_ID, d.FIRST_NAME MANAGERNAME
FROM EMPLOYEES e LEFT OUTER JOIN EMPLOYEES d
ON e.MANAGER_ID = d.EMPLOYEE_ID;


-- Steven ( 매니저 없는 사람 ) 까지 포함
SELECT e.EMPLOYEE_ID, e.FIRST_NAME, e.MANAGER_ID, d.FIRST_NAME MANAGERNAME
FROM EMPLOYEES e LEFT OUTER JOIN EMPLOYEES d
ON e.MANAGER_ID = d.MANAGER_ID;





